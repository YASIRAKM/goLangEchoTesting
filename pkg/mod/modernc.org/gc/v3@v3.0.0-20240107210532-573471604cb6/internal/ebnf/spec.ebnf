AliasDecl = identifier "=" Type .
Arguments = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
ArrayLength = Expression .
ArrayType = "[" ArrayLength "]" ElementType .
Assignment = ExpressionList assign_op ExpressionList .
BaseType = Type .
BasicLit = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
Block = "{" StatementList "}" .
BreakStmt = "break" [ Label ] .
Channel = Expression .
ChannelType = ( "chan" | "chan" "<-" | "<-" "chan" ) ElementType .
CommCase = "case" ( SendStmt | RecvStmt ) | "default" .
CommClause = CommCase ":" StatementList .
CompositeLit = LiteralType LiteralValue .
Condition = Expression .
ConstDecl = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
ConstSpec = IdentifierList [ [ Type ] "=" ExpressionList ] .
ContinueStmt = "continue" [ Label ] .
Conversion = Type "(" Expression [ "," ] ")" .
Declaration = ConstDecl | TypeDecl | VarDecl .
DeferStmt = "defer" Expression .
Element = Expression | LiteralValue .
ElementList = KeyedElement { "," KeyedElement } .
ElementType = Type .
EmbeddedField = [ "*" ] TypeName [ TypeArgs ] .
EmptyStmt =  .
ExprCaseClause = ExprSwitchCase ":" StatementList .
ExprSwitchCase = "case" ExpressionList | "default" .
ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
Expression = UnaryExpr | Expression binary_op Expression .
ExpressionList = Expression { "," Expression } .
ExpressionStmt = Expression .
FallthroughStmt = "fallthrough" .
FieldDecl = ( IdentifierList Type | EmbeddedField ) [ Tag ] .
FieldName = identifier .
ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
FunctionBody = Block .
FunctionDecl = "func" FunctionName [ TypeParameters ] Signature [ FunctionBody ] .
FunctionLit = "func" Signature FunctionBody .
FunctionName = identifier .
FunctionType = "func" Signature .
GoStmt = "go" Expression .
GotoStmt = "goto" Label .
IdentifierList = identifier { "," identifier } .
IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
ImportDecl = "import" ( ImportSpec | "(" { ImportSpec ";" } ")" ) .
ImportPath = string_lit .
ImportSpec = [ "." | PackageName ] ImportPath .
IncDecStmt = Expression ( "++" | "--" ) .
Index = "[" Expression "]" .
InitStmt = SimpleStmt .
InterfaceElem = MethodElem | TypeElem .
InterfaceType = "interface" "{" { InterfaceElem ";" } "}" .
Key = FieldName | Expression | LiteralValue .
KeyType = Type .
KeyedElement = [ Key ":" ] Element .
Label = identifier .
LabeledStmt = Label ":" Statement .
Literal = BasicLit | CompositeLit | FunctionLit .
LiteralType = StructType | ArrayType | "[" "..." "]" ElementType | SliceType | MapType | TypeName [ TypeArgs ] .
LiteralValue = "{" [ ElementList [ "," ] ] "}" .
MapType = "map" "[" KeyType "]" ElementType .
MethodDecl = "func" Receiver MethodName Signature [ FunctionBody ] .
MethodElem = MethodName Signature .
MethodExpr = ReceiverType "." MethodName .
MethodName = identifier .
Operand = Literal | OperandName [ TypeArgs ] | "(" Expression ")" .
OperandName = identifier | QualifiedIdent .
PackageClause = "package" PackageName .
PackageName = identifier .
ParameterDecl = [ IdentifierList ] [ "..." ] Type .
ParameterList = ParameterDecl { "," ParameterDecl } .
Parameters = "(" [ ParameterList [ "," ] ] ")" .
PointerType = "*" BaseType .
PostStmt = SimpleStmt .
PrimaryExpr = Operand | Conversion | MethodExpr | PrimaryExpr Selector | PrimaryExpr Index | PrimaryExpr Slice | PrimaryExpr TypeAssertion | PrimaryExpr Arguments .
QualifiedIdent = PackageName "." identifier .
RangeClause = 
	  "range" Expression
	| ExpressionList "=" "range" Expression
	| IdentifierList ":=" "range" Expression
	.
Receiver = Parameters .
ReceiverType = Type .
RecvExpr = Expression .
RecvStmt = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
Result = Parameters | Type .
ReturnStmt = "return" [ ExpressionList ] .
SelectStmt = "select" "{" { CommClause } "}" .
Selector = "." identifier .
SendStmt = Channel "<-" Expression .
ShortVarDecl = IdentifierList ":=" ExpressionList .
Signature = Parameters [ Result ] .
SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
Slice = "[" [ Expression ] ":" [ Expression ] "]" | "[" [ Expression ] ":" Expression ":" Expression "]" .
SliceType = "[" "]" ElementType .
SourceFile = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
Statement = Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt | DeferStmt .
StatementList = { Statement ";" } .
StructType = "struct" "{" { FieldDecl ";" } "}" .
SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
Tag = string_lit .
TopLevelDecl = Declaration | FunctionDecl | MethodDecl .
Type = TypeName [ TypeArgs ] | TypeLit | "(" Type ")" .
TypeArgs = "[" TypeList [ "," ] "]" .
TypeAssertion = "." "(" Type ")" .
TypeCaseClause = TypeSwitchCase ":" StatementList .
TypeConstraint = TypeElem .
TypeDecl = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
TypeDef = identifier [ TypeParameters ] Type .
TypeElem = TypeTerm { "|" TypeTerm } .
TypeList = Type { "," Type } .
TypeLit = ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType .
TypeName = identifier | QualifiedIdent .
TypeParamDecl = IdentifierList TypeConstraint .
TypeParamList = TypeParamDecl { "," TypeParamDecl } .
TypeParameters = "[" TypeParamList [ "," ] "]" .
TypeSpec = AliasDecl | TypeDef .
TypeSwitchCase = "case" TypeList | "default" .
TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
TypeSwitchStmt = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
TypeTerm = Type | UnderlyingType .
UnaryExpr = PrimaryExpr | unary_op UnaryExpr .
UnderlyingType = "~" Type .
VarDecl = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
VarSpec = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
add_op = "+" | "-" | "|" | "^" .
assign_op = [ add_op | mul_op ] "=" .
big_u_value = "\\" "U" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit .
binary_digit = "0" | "1" .
binary_digits = binary_digit { [ "_" ] binary_digit } .
binary_lit = "0" ( "b" | "B" ) [ "_" ] binary_digits .
binary_op = "||" | "&&" | rel_op | add_op | mul_op .
byte_value = octal_byte_value | hex_byte_value .
decimal_digit = "0" ... "9" .
decimal_digits = decimal_digit { [ "_" ] decimal_digit } .
decimal_exponent = ( "e" | "E" ) [ "+" | "-" ] decimal_digits .
decimal_float_lit = decimal_digits "." [ decimal_digits ] [ decimal_exponent ] | decimal_digits decimal_exponent | "." decimal_digits [ decimal_exponent ] .
decimal_lit = "0" | ( "1" ... "9" ) [ [ "_" ] decimal_digits ] .
escaped_char = "\\" ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "'" | "\"" ) .
float_lit = decimal_float_lit | hex_float_lit .
hex_byte_value = "\\" "x" hex_digit hex_digit .
hex_digit = "0" ... "9" | "A" ... "F" | "a" ... "f" .
hex_digits = hex_digit { [ "_" ] hex_digit } .
hex_exponent = ( "p" | "P" ) [ "+" | "-" ] decimal_digits .
hex_float_lit = "0" ( "x" | "X" ) hex_mantissa hex_exponent .
hex_lit = "0" ( "x" | "X" ) [ "_" ] hex_digits .
hex_mantissa = [ "_" ] hex_digits "." [ hex_digits ] | [ "_" ] hex_digits | "." hex_digits .
identifier = letter { letter | unicode_digit } .
imaginary_lit = ( decimal_digits | int_lit | float_lit ) "i" .
int_lit = decimal_lit | binary_lit | octal_lit | hex_lit .
interpreted_string_lit = "\"" { unicode_value | byte_value } "\"" .
letter = unicode_letter | "_" .
little_u_value = "\\" "u" hex_digit hex_digit hex_digit hex_digit .
mul_op = "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" .
newline =  .
octal_byte_value = "\\" octal_digit octal_digit octal_digit .
octal_digit = "0" ... "7" .
octal_digits = octal_digit { [ "_" ] octal_digit } .
octal_lit = "0" [ "o" | "O" ] [ "_" ] octal_digits .
raw_string_lit = "`" { unicode_char | newline } "`" .
rel_op = "==" | "!=" | "<" | "<=" | ">" | ">=" .
rune_lit = "'" ( unicode_value | byte_value ) "'" .
string_lit = raw_string_lit | interpreted_string_lit .
unary_op = "+" | "-" | "!" | "^" | "*" | "&" | "<-" .
unicode_char =  .
unicode_digit =  .
unicode_letter =  .
unicode_value = unicode_char | little_u_value | big_u_value | escaped_char .
